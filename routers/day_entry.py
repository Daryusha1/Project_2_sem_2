from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states.fsm_day import DayEntry
from states.search_day import SearchDay
from keyboards.main import cancel_keyboard, get_main_keyboard
from routers.gallery import send_entry
from datetime import datetime
from pathlib import Path
import json

router = Router()

# üåû –ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å
@router.message(lambda msg: msg.text == "üåû –ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å")
async def start_fsm(message: types.Message, state: FSMContext):
    await message.answer("üíõ –ö–∞–∫–æ–π —Ü–≤–µ—Ç —É —Ç–≤–æ–µ–≥–æ –¥–Ω—è?", reply_markup=cancel_keyboard())
    await state.set_state(DayEntry.color)

@router.message(lambda msg: msg.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_fsm(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_main_keyboard())

@router.message(lambda msg: msg.text == "üñº –ì–∞–ª–µ—Ä–µ—è")
async def show_gallery(message: types.Message):
    file_path = Path("storage/data.json")
    if not file_path.exists():
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π üòî")
        return
    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)
    if not data:
        await message.answer("–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.")
        return
    entry = data[0]
    await send_entry(message.chat.id, entry, 0, len(data))

@router.message(DayEntry.color)
async def process_color(message: types.Message, state: FSMContext):
    await state.update_data(color=message.text)
    await message.answer("üëÉ –ê –∫–∞–∫–æ–π –∑–∞–ø–∞—Ö —É —ç—Ç–æ–≥–æ –¥–Ω—è?")
    await state.set_state(DayEntry.smell)

@router.message(DayEntry.smell)
async def process_smell(message: types.Message, state: FSMContext):
    await state.update_data(smell=message.text)
    await message.answer("üìù –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –¥–Ω—è –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–º")
    await state.set_state(DayEntry.word)

@router.message(DayEntry.word)
async def process_word(message: types.Message, state: FSMContext):
    if message.text and not message.text.startswith("http"):
        await state.update_data(word={"type": "text", "value": message.text})
        await message.answer("üñº –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–Ω—è")
        await state.set_state(DayEntry.photo)
    else:
        await message.answer("üìù –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –¥–Ω—è –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.")

@router.message(DayEntry.photo)
async def process_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–Ω—è üì∏")
        return
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("üé∂ –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º—É–∑—ã–∫—É –¥–Ω—è (–∞—É–¥–∏–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É)")
    await state.set_state(DayEntry.music)

@router.message(DayEntry.music)
async def process_music(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    # –ú—É–∑—ã–∫–∞: –ª–∏–±–æ –∞—É–¥–∏–æ, –ª–∏–±–æ —Å—Å—ã–ª–∫–∞
    if message.audio:
        user_data["music"] = {"type": "audio", "file_id": message.audio.file_id}
    elif message.text and message.text.startswith("http"):
        user_data["music"] = {"type": "link", "url": message.text}
    else:
        await message.answer("–ü—Ä–∏—à–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º—É–∑—ã–∫—É üéµ")
        return

    await message.answer("‚úÖ –î–µ–Ω—å –∑–∞–ø–∏—Å–∞–Ω! –°–ø–∞—Å–∏–±–æ üå∑", reply_markup=get_main_keyboard())
    await state.clear()

    file_path = Path("storage/data.json")
    all_entries = []
    if file_path.exists():
        with open(file_path, "r", encoding="utf-8") as f:
            all_entries = json.load(f)

    user_data["date"] = message.date.isoformat()
    user_data["user_id"] = message.from_user.id
    all_entries.append(user_data)

    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(all_entries, f, ensure_ascii=False, indent=2)

# üìÖ –ù–∞–π—Ç–∏ –ø–æ –¥–∞—Ç–µ
@router.message(lambda msg: msg.text == "üìÖ –ù–∞–π—Ç–∏ –ø–æ –¥–∞—Ç–µ")
async def ask_date(message: types.Message, state: FSMContext):
    await message.answer("üìÜ –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì`, –Ω–∞–ø—Ä–∏–º–µ—Ä: 01.06.2025", parse_mode="Markdown")
    await state.set_state(SearchDay.waiting_for_date)

@router.message(SearchDay.waiting_for_date)
async def search_by_date(message: types.Message, state: FSMContext):
    try:
        target_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: `–î–î.–ú–ú.–ì–ì–ì–ì`")
        return

    file_path = Path("storage/data.json")
    if not file_path.exists():
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        await state.clear()
        return

    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    for i, entry in enumerate(data):
        entry_date = datetime.fromisoformat(entry["date"]).date()
        if entry_date == target_date:
            await state.clear()
            await send_entry(message, entry, i, len(data))
            return

    await message.answer("–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await state.clear()
